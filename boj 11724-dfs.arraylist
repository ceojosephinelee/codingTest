import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.ArrayList;
 
public class Main {
    static ArrayList<Integer>[] A; // arraylist 배열
    static boolean visited[];
    
	public static void main(String[] args) throws IOException {
        
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 
 		String str = br.readLine();
		StringTokenizer st = new StringTokenizer(str," ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        A = new ArrayList[N+1];//왜 이렇게 표기하는지 모르겠음........?
        visited= new boolean[N+1];
        for(int i =1;i<=N;i++){ //1부터 N까지.....?
            A[i]=new ArrayList<Integer>();
        }
        for(int i =0;i<M;i++){
            st = new StringTokenizer(br.readLine()," ");
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            A[s].add(e); // list니까 add 사용
            A[e].add(s);// 양방향 그래프이므로 둘 다 넣어주기
            
        }
        int count =0;
        //방문 배열
        for(int i=1;i<=N;i++){ 
            if(!visited[i]){
                count++;
                DFS(i);
            }
        }
        System.out.println(count);
    }
    public static void DFS(int v){
        if(visited[v]){
            return; //방문했으면 더이상 탐색하지 않음
        }
        visited[v]=true; // 방문했으니 true
        for(int i:A[v]){ // 한 개의 인접리스트 안에서 
            if(!visited[i]){ //연결 노드 중 방문하지 않았던 노드만 탐색하기
                DFS(i);
            }
        }
        
    }
}
