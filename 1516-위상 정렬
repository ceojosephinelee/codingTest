import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
 
public class Main {
 
	public static void main(String[] args) throws IOException {
        
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 
 		int N = Integer.parseInt(br.readLine());
        //인접리스트
        ArrayList<Integer>[] A = new ArrayList[N+1];
        for(int i = 1;i<=N;i++){
            A[i]=new ArrayList<Integer>();
        }
        //진입차수 배열
        int[] enter = new int[N+1];
        //자기짓는 시간 배열
        int[] selfTime = new int[N+1];                      
        for(int i=1;i<=N;i++){
            StringTokenizer st = new StringTokenizer(br.readLine()," ");            
		    selfTime[i]=Integer.parseInt(st.nextToken());
            while(true){   
                int a = Integer.parseInt(st.nextToken()); 
                if(a==-1){
                    break;   
                }
                A[a].add(i);
                enter[i]++;
            }         
        }
        //위상 정렬
        //본인 짓기 전 배열 선언
        int[] beforeSelf = new int[N+1];
        Queue<Integer> queue = new LinkedList<>();
        for(int i =1;i<=N;i++){
            if(enter[i]==0){
                queue.offer(i);
            }
        }
        while(!queue.isEmpty()){
            int now = queue.poll();
            for(int i : A[now]){
                enter[i]--;
                beforeSelf[i]= Math.max(beforeSelf[i],beforeSelf[now]+selfTime[now]);//이게 이 문제 핵심!!
                if(enter[i]==0){
                    queue.offer(i);                   
                }
            }
            
        }
        for(int i =1;i<=N;i++){
            System.out.println(beforeSelf[i]+selfTime[i]); //정답 출력
        }
    }
}
