import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;
 
public class Main {
    public static int diff,N;
    public static int[][] arr;
    public static boolean[] visited;
    public static int Min = Integer.MAX_VALUE;//
	public static void main(String[] args) throws IOException {
        
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 
 		N = Integer.parseInt(br.readLine());
        arr =new int[N][N];
        visited = new boolean[N];
        
        for(int i=0;i<N;i++){            
            StringTokenizer st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<N;j++){
                arr[i][j]= Integer.parseInt(st.nextToken());
            }
        }
        dfs(0,0); //index(몇 번째 것 뽑는지)?, depth(몇 개 뽑는지)
        System.out.print(Min);

    }
    ///////////////////
    public static void dfs(int index, int depth){        
        if(depth ==N/2){
            int start=0;
            int link=0;

            for(int i =0;i<N-1;i++){
                for(int j=i+1;j<N;j++){
                    if(visited[i] && visited[j]){
                        start += arr[i][j];
                        start += arr[j][i];                        
                    }else if(!visited[i] && !visited[j]){
                        link += arr[i][j];
                        link += arr[j][i];
                    }
                }
            }
            //////////////////////
           
            Min = Math.min(Math.abs(start-link), Min);

        }
        //////////////
        for(int i=index;i<N;i++){
            if(!visited[i]){
                visited[i]=true;
                dfs(i+1,depth+1);
                visited[i]=false;
            }
        }     
    }

}
